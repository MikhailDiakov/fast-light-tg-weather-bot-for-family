import httpx
from httpx import HTTPStatusError, RequestError

from app.config import API_KEY_AI
from app.storage import get_user_data
from app.utils.greeting import get_greeting
from app.utils.weather import get_weather


async def generate_full_weather_report(
    user_id: int, lat: float, lon: float, forecast_points: list
) -> str:
    greeting = get_greeting(user_id)
    current_weather = await get_weather(lat, lon)
    user_data = get_user_data(user_id)
    notes = user_data.get("notes", "").strip()

    forecast_block = (
        f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ –≥–æ–¥–∏–Ω–∏ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ {lat:.2f}, {lon:.2f}):\n"
    )
    for point in forecast_points:
        time = point["time"][11:16]
        forecast_block += (
            f"{time}: {point['description']}, "
            f"{point['temp']}¬∞C, "
            f"–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {point['feels_like']}¬∞C, "
            f"–≤—ñ—Ç–µ—Ä {point['wind_speed']} –º/—Å, "
            f"–æ–ø–∞–¥–∏: {int(point['pop'] * 100)}%\n"
        )

    prompt = (
        f"{greeting}\n\n"
        f"–ó–∞—Ä–∞–∑ –∑–∞ –≤—ñ–∫–Ω–æ–º:\n{current_weather}\n\n"
        "–ê —Ç–µ–ø–µ—Ä –≤–∞—Å —Ç—É—Ä–±—É—î —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω–∏–π —ñ –∫—É–º–µ–¥–Ω–∏–π —Å–∏–Ω–æ–ø—Ç–∏–∫ –ê–Ω–∞—Ç–æ–ª—ñ–π –ü—Ä–æ–≥–Ω–æ–∑–µ–Ω–∫–æ üòéüìª\n\n"
        f"{forecast_block}\n"
        "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ, –≤–µ—Å–µ–ª–æ —ñ –ø–æ-–ª—é–¥—Å—å–∫–∏:\n"
        "- —è–∫ –∑–º—ñ–Ω–∏—Ç—å—Å—è –ø–æ–≥–æ–¥–∞ (–∫–æ—Ä–æ—Ç–∫–æ, –ø–æ –≥–æ–¥–∏–Ω–∞—Ö –∞–±–æ –∑–∞–≥–∞–ª—å–Ω—É —Ç–µ–Ω–¥–µ–Ω—Ü—ñ—é)\n"
        "- —â–æ –≤–¥—è–≥–Ω—É—Ç–∏ (–±–µ–∑ –≤–∫–∞–∑—ñ–≤–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å —á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –æ–¥—è–≥)\n"
        "- —â–æ –≤–∑—è—Ç–∏ –∑ —Å–æ–±–æ—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ø–∞–Ω–∞–º–∫–∞, –∑–æ–Ω—Ç, –æ–∫—É–ª—è—Ä–∏)\n"
        "- 1 —Å–º—ñ—à–Ω–∏–π —Ñ–∞–∫—Ç –ø—Ä–æ –ø–æ–≥–æ–¥—É, –ø—Ä–∏—Ä–æ–¥—É –∞–±–æ –ª—é–¥–µ–π\n"
        "- –∫—É–º–µ–¥–Ω–µ –ø–æ–±–∞–∂–∞–Ω–Ω—è –≥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è\n"
        "- –ø–æ–±–∞–∂–∞–Ω–Ω—è –∑—Ä–æ–±–∏ –∫–æ—Ä–æ—Ç–∫–∏–º (2‚Äì3 —Ä–µ—á–µ–Ω–Ω—è), –∞–ª–µ —â–∏—Ä–∏–º —ñ –∑ –≥—É–º–æ—Ä–æ–º\n"
        "- –Ω–∞–≥–∞–¥–∞–π –≤ –∫—ñ–Ω—Ü—ñ, —â–æ –î—å—è–∫–æ–≤–∏ –Ω–∞–π–∫—Ä–∞—â—ñ üí™\n"
    )

    if notes:
        prompt += (
            f"\n\n‚ö†Ô∏è –í–ø–ª–µ—Ç–∏ —Ü—é –æ—Å–æ–±–ª–∏–≤—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é —É –ø–æ–±–∞–∂–∞–Ω–Ω—è –Ω–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ, "
            f"–ø—Ä–∏—Ä–æ–¥–Ω–æ, –∑ –≥—É–º–æ—Ä–æ–º –∞–±–æ —Ç–µ–ø–ª–æ:\n{notes}"
        )

    url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
    headers = {
        "Content-Type": "application/json",
        "X-goog-api-key": API_KEY_AI,
    }
    json_data = {"contents": [{"parts": [{"text": prompt}]}]}

    try:
        async with httpx.AsyncClient(timeout=30) as client:
            response = await client.post(url, headers=headers, json=json_data)
            response.raise_for_status()
            data = response.json()

        raw_text = data["candidates"][0]["content"]["parts"][0]["text"]
        return raw_text.strip()

    except HTTPStatusError as e:
        status_code = e.response.status_code
        if status_code == 429:
            return "ü•µ –ó–∞—Ä–∞–∑ –¥—É–∂–µ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ AI. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ!"
        elif status_code == 503:
            return (
                "üòî –°–µ—Ä–≤—ñ—Å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω."
            )
        else:
            return f"üö® –ü–æ–º–∏–ª–∫–∞ –∑ –±–æ–∫—É AI (–∫–æ–¥ {status_code}). –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."

    except RequestError:
        return "üöß –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –º–µ—Ä–µ–∂–µ—é –∞–±–æ —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."

    except Exception as e:
        return f"‚ö†Ô∏è –ù–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}"


async def generate_short_ai_weather_report(
    user_id, forecast_points, current_weather
) -> str:
    greeting = get_greeting(user_id)

    forecast_block = ""
    for point in forecast_points[:4]:
        time = point["time"][11:16]
        forecast_block += (
            f"{time}: {point['description'].capitalize()}, "
            f"{point['temp']}¬∞C, –≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ {point['feels_like']}¬∞C, "
            f"–≤—ñ—Ç–µ—Ä {point['wind_speed']} –º/—Å, "
            f"–æ–ø–∞–¥–∏: {int(point['pop'] * 100)}%\n"
        )

    prompt = (
        f"{greeting}\n\n"
        f"–ó–∞—Ä–∞–∑ –∑–∞ –≤—ñ–∫–Ω–æ–º:\n{current_weather}\n\n"
        f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ –≥–æ–¥–∏–Ω–∏:\n{forecast_block}\n"
        "–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ —ñ –∑—Ä–æ–∑—É–º—ñ–ª–æ, –±–µ–∑ –∑—ñ—Ä–æ—á–æ–∫, —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏ –µ–º–æ–¥–∑—ñ, —É –≤–∏–≥–ª—è–¥—ñ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç—É:\n"
        "- –Ø–∫–∞ –∑–∞—Ä–∞–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —ñ —è–∫ –≤–æ–Ω–∞ –≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è\n"
        "- –©–æ –æ—á—ñ–∫—É–≤–∞—Ç–∏ —É –Ω–∞–π–±–ª–∏–∂—á—ñ –≥–æ–¥–∏–Ω–∏ (–∫–æ—Ä–æ—Ç–∫–æ –ø–æ –ø—Ä–æ–≥–Ω–æ–∑—É)\n"
    )

    url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent"
    headers = {
        "Content-Type": "application/json",
        "X-goog-api-key": API_KEY_AI,
    }
    json_data = {"contents": [{"parts": [{"text": prompt}]}]}

    async with httpx.AsyncClient(timeout=30) as client:
        response = await client.post(url, headers=headers, json=json_data)
        response.raise_for_status()
        data = response.json()

    raw_text = data["candidates"][0]["content"]["parts"][0]["text"]
    return raw_text.strip()
