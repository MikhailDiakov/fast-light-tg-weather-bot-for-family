from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from app.ai_integration import generate_full_weather_report
from app.keyboards.weather import (
    change_kb,
    location_request_kb,
    main_menu_kb,
    remove_kb,
)
from app.states.admin import EditUserStates
from app.states.weather import Form
from app.storage import get_all_users, get_user_data, save_user_data, user_exists
from app.utils.checker import is_admin_member, is_family_member
from app.utils.city import get_city_name_from_coords
from app.utils.validators import is_valid_time_format
from app.utils.weather import fetch_forecast_data

router = Router()


@router.message(F.text == "/start")
async def cmd_start(message: types.Message, state: FSMContext):
    if not is_family_member(message.from_user.id):
        await message.answer("‚õîÔ∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Ä–æ–¥–∏–Ω–∏ ‚ù§Ô∏è")
        return

    await state.clear()
    await state.set_state(Form.city)
    await state.update_data(action="new")
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é üìç",
        reply_markup=location_request_kb(),
    )


@router.message(F.text == "–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚öôÔ∏è")
async def handle_settings_button(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if not is_family_member(user_id):
        await message.answer("‚õîÔ∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Ä–æ–¥–∏–Ω–∏ ‚ù§Ô∏è")
        return

    if not user_exists(user_id):
        await message.answer("‚ö†Ô∏è –¢–∏ —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–≤ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è. –ù–∞–ø–∏—à–∏ /start.")
        return

    await state.set_state(Form.choice)
    await message.answer("üîß –©–æ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏?", reply_markup=change_kb())


@router.message(Form.choice, F.text == "–ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ üèô")
async def change_city(message: types.Message, state: FSMContext):
    await state.set_state(Form.city)
    await state.update_data(action="change")
    await message.answer(
        "üìç –ù–∞–¥—ñ—à–ª–∏ –Ω–æ–≤—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:", reply_markup=location_request_kb()
    )


@router.message(Form.choice, F.text == "–ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å ‚è∞")
async def change_time(message: types.Message, state: FSMContext):
    await state.set_state(Form.time)
    await message.answer(
        "üïí –í–≤–µ–¥–∏ –Ω–æ–≤–∏–π —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 08:00):",
        reply_markup=remove_kb(),
    )


@router.message(Form.choice)
async def invalid_choice(message: types.Message):
    await message.answer("‚ùå –û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é.", reply_markup=change_kb())


@router.message(Form.city, F.location)
async def process_location(message: types.Message, state: FSMContext):
    lat = message.location.latitude
    lon = message.location.longitude

    data = await state.get_data()
    action = data.get("action")

    if action == "change":
        user_id = message.from_user.id
        user_data = get_user_data(user_id)
        time_text = user_data.get("time", "08:00")
        name = user_data.get("name", "–¥—Ä—É–∂–µ")
        notes = user_data.get("notes", "")

        save_user_data(message.from_user.id, lat, lon, time_text, name, notes=notes)

        await message.answer(
            f"‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ: {lat:.4f}, {lon:.4f}.\n"
            f"–ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è {time_text}.",
            reply_markup=main_menu_kb(),
        )
        await state.clear()
    else:
        await state.update_data(lat=lat, lon=lon)
        await state.set_state(Form.time)
        await message.answer(
            f"–ó—Ä–æ–∑—É–º—ñ–≤, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {lat:.4f}, {lon:.4f}.\n"
            "–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 08:00):",
            reply_markup=remove_kb(),
        )


@router.message(Form.city)
async def process_city_invalid(message: types.Message):
    await message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π –ª–∏—à–µ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é üìç, –Ω–µ –≤–≤–æ–¥—å –º—ñ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º.",
        reply_markup=location_request_kb(),
    )


@router.message(Form.time)
async def process_time(message: types.Message, state: FSMContext):
    time_text = message.text.strip()

    if not is_valid_time_format(time_text):
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É! –í–≤–µ–¥–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 08:00.")
        return

    data = await state.get_data()
    lat = data.get("lat")
    lon = data.get("lon")

    if lat is None or lon is None:
        user_id = message.from_user.id
        user_data = get_user_data(user_id)
        lat = user_data.get("lat")
        lon = user_data.get("lon")
        notes = user_data.get("notes", "")

    if lat is None or lon is None:
        await message.answer(
            "‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é."
        )
        await state.set_state(Form.city)
        return

    try:
        lat = float(lat)
        lon = float(lon)
    except (TypeError, ValueError):
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –°–ø—Ä–æ–±—É–π –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
        await state.set_state(Form.city)
        return

    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    name = user_data.get("name", "–¥—Ä—É–∂–µ")

    save_user_data(message.from_user.id, lat, lon, time_text, name, notes=notes)

    await message.answer(
        f"‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –Ω–∞ {time_text} –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {lat:.4f}, {lon:.4f}.",
        reply_markup=main_menu_kb(),
    )
    await state.clear()


@router.message(F.text == "–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≥–æ–¥—É –∑–∞—Ä–∞–∑ üå§")
async def show_weather_now(message: types.Message):
    user_id = message.from_user.id

    if not user_exists(user_id):
        await message.answer("‚ö†Ô∏è –¢–∏ —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–≤ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è. –ù–∞–ø–∏—à–∏ /start.")
        return

    user_data = get_user_data(user_id)

    lat = user_data.get("lat")
    lon = user_data.get("lon")

    if lat is None or lon is None:
        await message.answer(
            "‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ. –°–ø—Ä–æ–±—É–π –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è."
        )
        return

    try:
        lat = float(lat)
        lon = float(lon)
    except (TypeError, ValueError):
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –°–ø—Ä–æ–±—É–π –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
        return

    forecast_points = await fetch_forecast_data(lat, lon)
    if not forecast_points:
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    text = await generate_full_weather_report(user_id, lat, lon, forecast_points)
    await message.answer(text, reply_markup=main_menu_kb())


@router.message(F.text == "–î—ñ–∑–Ω–∞—Ç–∏—Å—å –º—ñ—Å—Ç–æ üèôÔ∏è")
async def get_city_name(message: types.Message):
    user_id = message.from_user.id

    if not user_exists(user_id):
        await message.answer("‚ö†Ô∏è –¢–∏ —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–≤ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è. –ù–∞–ø–∏—à–∏ /start.")
        return

    user_data = get_user_data(user_id)
    lat = user_data.get("lat")
    lon = user_data.get("lon")

    if lat is None or lon is None:
        await message.answer(
            "‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é."
        )
        return

    try:
        lat = float(lat)
        lon = float(lon)
    except (TypeError, ValueError):
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –°–ø—Ä–æ–±—É–π –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
        return

    city_name = await get_city_name_from_coords(lat, lon)
    if city_name:
        await message.answer(
            f"–Ø–∫—â–æ —è –Ω–µ –ø–æ–º–∏–ª—è—é—Å—å, —Ü–µ –º—ñ—Å—Ç–æ: {city_name}.\n"
            f"–Ø–∫—â–æ —Ü–µ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî —É—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤ –¢–µ–ª–µ–≥—Ä–∞–º–∞, —è —Ç—É—Ç –Ω—ñ –¥–æ —á–æ–≥–æ üòâ"
        )
    else:
        await message.answer(
            "–Ø–∫—â–æ —Ü–µ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî —É—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤ –¢–µ–ª–µ–≥—Ä–∞–º–∞, —è —Ç—É—Ç –Ω—ñ –¥–æ —á–æ–≥–æ üòâ"
        )


@router.message(F.text == "/myid")
async def send_user_id(message: types.Message):
    user_id = message.from_user.id
    await message.answer(f"üÜî –¢–≤—ñ–π Telegram ID: `{user_id}`", parse_mode="Markdown")


@router.message(F.text.startswith("/edit_user"))
async def cmd_edit_user_start(message: types.Message, state: FSMContext):
    if not is_admin_member(message.from_user.id):
        await message.answer(
            "‚õîÔ∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.", parse_mode=None
        )
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ùóÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /edit_user <user_id>", parse_mode=None)
        return

    try:
        user_id = int(args[1])
    except ValueError:
        await message.answer("‚ùóÔ∏è user_id –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.", parse_mode=None)
        return

    user_data = get_user_data(user_id)
    if not user_data:
        await message.answer(
            f"‚ùóÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.", parse_mode=None
        )
        return

    await state.update_data(user_id=user_id)
    text = (
        f"–ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}:\n"
        f"–Ü–º'—è: {user_data.get('name', '')}\n"
        f"–ó–∞–º–µ—Ç–∫–∏: {user_data.get('notes', '')}\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ —ñ–º'—è —Ç–∞ –∑–∞–º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ | (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞ —Ä–∏—Å–∫–∞), –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
        "–ù–æ–≤–µ —ñ–º'—è|–ù–æ–≤—ñ –∑–∞–º–µ—Ç–∫–∏"
    )
    await message.answer(text, parse_mode=None)
    await state.set_state(EditUserStates.waiting_for_new_data)


@router.message(EditUserStates.waiting_for_new_data)
async def process_new_data(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    if not user_id:
        await message.answer("‚ùóÔ∏è –ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π user_id —É —Å—Ç–∞–Ω—ñ.")
        await state.clear()
        return

    if "|" not in message.text:
        await message.answer("‚ùóÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: –Ü–º'—è|–ó–∞–º–µ—Ç–∫–∏")
        return

    name, notes = map(str.strip, message.text.split("|", maxsplit=1))

    user_data = get_user_data(user_id)
    if not user_data:
        await message.answer(f"‚ùóÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
        await state.clear()
        return

    save_user_data(
        user_id=user_id,
        lat=user_data.get("lat", 0),
        lon=user_data.get("lon", 0),
        notify_time=user_data.get("time", ""),
        name=name,
        notes=notes,
    )

    await message.answer(
        f"‚úÖ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –æ–Ω–æ–≤–ª–µ–Ω–æ:\n–Ü–º'—è: {name}\n–ó–∞–º–µ—Ç–∫–∏: {notes}"
    )
    await state.clear()


@router.message(F.text == "/list_users")
async def cmd_list_users(message: types.Message):
    if not is_admin_member(message.from_user.id):
        await message.answer("‚õîÔ∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    users = get_all_users()
    if not users:
        await message.answer("‚ùóÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
        return

    text_lines = ["–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:"]
    for user_id, data in users.items():
        text_lines.append(
            f"ID: {user_id}\n"
            f"–Ü–º'—è: {data.get('name', '')}\n"
            f"–ó–∞–º–µ—Ç–∫–∏: {data.get('notes', '')}\n"
            f"–õ–æ–∫–∞—Ü—ñ—è: ({data.get('lat', '')}, {data.get('lon', '')})\n"
            f"–ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {data.get('time', '')}\n"
            "-----------------------"
        )

    for chunk in [text_lines[i : i + 10] for i in range(0, len(text_lines), 10)]:
        await message.answer("\n\n".join(chunk))
