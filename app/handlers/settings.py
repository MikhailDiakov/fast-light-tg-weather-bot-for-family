from aiogram import F, Router, types
from aiogram.filters import StateFilter, or_f
from aiogram.fsm.context import FSMContext

from app.keyboards import (
    change_kb,
    location_request_kb_with_back,
    main_menu_kb,
    remove_kb,
    time_change_kb,
)
from app.states import EditUserStates, WeatherForm
from app.storage import get_user_data, save_user_data, user_exists
from app.utils.checker import is_family_member
from app.utils.validators import is_valid_time_format

router = Router()


@router.message(F.text == "–ú–æ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è üìã")
async def show_user_settings(message: types.Message):
    if not is_family_member(message.from_user.id):
        await message.answer("‚õîÔ∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Ä–æ–¥–∏–Ω–∏ ‚ù§Ô∏è")
        return

    user_data = get_user_data(message.from_user.id)
    if not user_data:
        await message.answer("‚ö†Ô∏è –¢–∏ —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–≤ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è. –ù–∞–ø–∏—à–∏ /start.")
        return

    lat = user_data.get("lat")
    lon = user_data.get("lon")
    time = user_data.get("time", "08:00")
    name = user_data.get("name", "–¥—Ä—É–∂–µ")

    await message.answer(
        f"üìã *–¢–≤–æ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:*\n"
        f"üë§ –Ü–º'—è: *{name}*\n"
        f"üïí –ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: *{time}*\n"
        f"üåç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: `{lat:.4f}, {lon:.4f}`\n",
        parse_mode="Markdown",
    )


@router.message(F.text == "–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚öôÔ∏è")
async def handle_settings_button(message: types.Message, state: FSMContext):
    if not is_family_member(message.from_user.id):
        await message.answer("‚õîÔ∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Ä–æ–¥–∏–Ω–∏ ‚ù§Ô∏è")
        return

    if not user_exists(message.from_user.id):
        await message.answer("‚ö†Ô∏è –¢–∏ —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–≤ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è. –ù–∞–ø–∏—à–∏ /start.")
        return

    await state.set_state(WeatherForm.choice)
    await message.answer("üîß –©–æ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏?", reply_markup=change_kb())


@router.message(WeatherForm.choice, F.text == "–ó–º—ñ–Ω–∏—Ç–∏ –º—ñ—Å—Ç–æ üèô")
async def change_city(message: types.Message, state: FSMContext):
    if not is_family_member(message.from_user.id):
        await message.answer("‚õîÔ∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Ä–æ–¥–∏–Ω–∏ ‚ù§Ô∏è")
        return

    await state.set_state(WeatherForm.city)
    await state.update_data(action="change")
    await message.answer(
        "üìç –ù–∞–¥—ñ—à–ª–∏ –Ω–æ–≤—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:", reply_markup=location_request_kb_with_back()
    )


@router.message(WeatherForm.choice, F.text == "–ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å ‚è∞")
async def change_time(message: types.Message, state: FSMContext):
    if not is_family_member(message.from_user.id):
        await message.answer("‚õîÔ∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Ä–æ–¥–∏–Ω–∏ ‚ù§Ô∏è")
        return

    await state.set_state(WeatherForm.time)
    await message.answer(
        "üïí –í–≤–µ–¥–∏ –Ω–æ–≤–∏–π —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 08:00):",
        reply_markup=time_change_kb(),
    )


@router.message(WeatherForm.city, F.location)
async def process_location(message: types.Message, state: FSMContext):
    if not is_family_member(message.from_user.id):
        await message.answer("‚õîÔ∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Ä–æ–¥–∏–Ω–∏ ‚ù§Ô∏è")
        return

    lat = message.location.latitude
    lon = message.location.longitude

    data = await state.get_data()
    action = data.get("action")

    if action == "change":
        user_id = message.from_user.id
        user_data = get_user_data(user_id)
        time_text = user_data.get("time", "08:00")
        name = user_data.get("name", "–¥—Ä—É–∂–µ")
        notes = user_data.get("notes", "")

        save_user_data(user_id, lat, lon, time_text, name, notes=notes)

        await message.answer(
            f"‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ: {lat:.4f}, {lon:.4f}.\n"
            f"–ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è {time_text}.",
            reply_markup=main_menu_kb(),
        )
        await state.clear()
    else:
        await state.update_data(lat=lat, lon=lon)
        await state.set_state(WeatherForm.time)
        await message.answer(
            f"–ó—Ä–æ–∑—É–º—ñ–≤, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {lat:.4f}, {lon:.4f}.\n"
            "–¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 08:00):",
            reply_markup=remove_kb(),
        )


@router.message(
    F.text == "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è",
    or_f(
        StateFilter(None),
        StateFilter(WeatherForm.city),
        StateFilter(WeatherForm.choice),
        StateFilter(WeatherForm.time),
        StateFilter(EditUserStates.waiting_for_new_data),
    ),
)
async def back_handler(message: types.Message, state: FSMContext):
    if not is_family_member(message.from_user.id):
        await message.answer("‚õîÔ∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Ä–æ–¥–∏–Ω–∏ ‚ù§Ô∏è")
        return

    await state.clear()
    await message.answer("üì≤ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())


@router.message(WeatherForm.choice)
async def invalid_choice(message: types.Message):
    if not is_family_member(message.from_user.id):
        await message.answer("‚õîÔ∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Ä–æ–¥–∏–Ω–∏ ‚ù§Ô∏è")
        return

    await message.answer("‚ùå –û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é.", reply_markup=change_kb())


@router.message(WeatherForm.city, ~F.location)
async def process_city_invalid(message: types.Message):
    if not is_family_member(message.from_user.id):
        await message.answer("‚õîÔ∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Ä–æ–¥–∏–Ω–∏ ‚ù§Ô∏è")
        return

    await message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—Å–∏–ª–∞–π –ª–∏—à–µ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é üìç, –Ω–µ –≤–≤–æ–¥—å –º—ñ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–º.",
        reply_markup=location_request_kb_with_back(),
    )


@router.message(WeatherForm.time)
async def process_time(message: types.Message, state: FSMContext):
    if not is_family_member(message.from_user.id):
        await message.answer("‚õîÔ∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Ä–æ–¥–∏–Ω–∏ ‚ù§Ô∏è")
        return

    time_text = message.text.strip()

    if not is_valid_time_format(time_text):
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É! –í–≤–µ–¥–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 08:00.")
        return

    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    name = "–¥—Ä—É–∂–µ"
    notes = ""

    if user_data:
        name = user_data.get("name", "–¥—Ä—É–∂–µ")
        notes = user_data.get("notes", "")

    data = await state.get_data()
    lat = data.get("lat")
    lon = data.get("lon")

    if lat is None or lon is None:
        if user_data:
            lat = user_data.get("lat")
            lon = user_data.get("lon")

    if lat is None or lon is None:
        await message.answer(
            "‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é."
        )
        await state.set_state(WeatherForm.city)
        return

    try:
        lat = float(lat)
        lon = float(lon)
    except (TypeError, ValueError):
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –°–ø—Ä–æ–±—É–π –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
        await state.set_state(WeatherForm.city)
        return

    save_user_data(user_id, lat, lon, time_text, name, notes=notes)

    await message.answer(
        f"‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –Ω–∞ {time_text} –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {lat:.4f}, {lon:.4f}.",
        reply_markup=main_menu_kb(),
    )
    await state.clear()
