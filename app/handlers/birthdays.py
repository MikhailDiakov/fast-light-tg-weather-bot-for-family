from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from app.keyboards import back_only_kb, birthday_menu_kb
from app.states import BirthdayState
from app.storage import add_birthday, delete_birthday, get_all_birthdays
from app.utils.checker import is_family_member
from app.utils.validators import is_valid_date_format

router = Router()


@router.message(F.text == "–î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è üéÇ")
async def birthday_menu(message: types.Message):
    if not is_family_member(message.from_user.id):
        await message.answer("‚õîÔ∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Ä–æ–¥–∏–Ω–∏ ‚ù§Ô∏è")
        return

    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –¥–Ω—è–º–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:", reply_markup=birthday_menu_kb()
    )


@router.message(F.text == "‚ûï –î–æ–¥–∞—Ç–∏")
async def add_birthday_start(message: types.Message, state: FSMContext):
    if not is_family_member(message.from_user.id):
        await message.answer("‚õîÔ∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Ä–æ–¥–∏–Ω–∏ ‚ù§Ô∏è")
        return

    await state.set_state(BirthdayState.name)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–º º—è:", reply_markup=back_only_kb())


@router.message(BirthdayState.name)
async def add_birthday_name(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è":
        await state.clear()
        await birthday_menu(message)
        return

    if not is_family_member(message.from_user.id):
        await message.answer("‚õîÔ∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Ä–æ–¥–∏–Ω–∏ ‚ù§Ô∏è")
        return

    await state.update_data(name=message.text)
    await state.set_state(BirthdayState.date)
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†:", reply_markup=back_only_kb()
    )


@router.message(BirthdayState.date)
async def add_birthday_date(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è":
        await state.clear()
        await birthday_menu(message)
        return

    if not is_family_member(message.from_user.id):
        await message.answer("‚õîÔ∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Ä–æ–¥–∏–Ω–∏ ‚ù§Ô∏è")
        return

    date = message.text
    if not is_valid_date_format(date):
        await message.answer(
            "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –∞–±–æ –Ω–µ—ñ—Å–Ω—É—é—á–∞ –¥–∞—Ç–∞. –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 15.07.1990",
            reply_markup=back_only_kb(),
        )
        return

    data = await state.get_data()
    name = data["name"]
    success = add_birthday(name, date)
    if not success:
        await message.answer(
            f"‚ùå –Ü–º'—è '{name}' –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —ñ–Ω—à–µ —ñ–º'—è.",
            reply_markup=back_only_kb(),
        )
        await state.clear()
        await birthday_menu(message)
        return

    await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ: {name} ‚Äî {date}")
    await state.clear()
    await birthday_menu(message)


@router.message(F.text == "üìã –ü–æ–∫–∞–∑–∞—Ç–∏")
async def show_birthdays(message: types.Message):
    if not is_family_member(message.from_user.id):
        await message.answer("‚õîÔ∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Ä–æ–¥–∏–Ω–∏ ‚ù§Ô∏è")
        return

    bdays = get_all_birthdays()
    if not bdays:
        await message.answer("–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.")
    else:
        text = "\n".join([f"{b['name']} ‚Äî {b['date']}" for b in bdays])
        await message.answer("üéâ –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:\n" + text)
    await birthday_menu(message)


@router.message(F.text == "üóë –í–∏–¥–∞–ª–∏—Ç–∏")
async def delete_birthday_prompt(message: types.Message, state: FSMContext):
    if not is_family_member(message.from_user.id):
        await message.answer("‚õîÔ∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Ä–æ–¥–∏–Ω–∏ ‚ù§Ô∏è")
        return

    await state.set_state(BirthdayState.delete_name)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —ñ–º º—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=back_only_kb())


@router.message(BirthdayState.delete_name)
async def delete_birthday_name(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è":
        await state.clear()
        await birthday_menu(message)
        return

    if not is_family_member(message.from_user.id):
        await message.answer("‚õîÔ∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Ä–æ–¥–∏–Ω–∏ ‚ù§Ô∏è")
        return

    deleted = delete_birthday(message.text)
    if deleted:
        await message.answer("‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ —ñ–º–µ–Ω—ñ –≤ —Å–ø–∏—Å–∫—É –Ω–µ–º–∞—î.")
    await state.clear()
    await birthday_menu(message)
