from aiogram import F, Router, types
from httpx import HTTPStatusError, RequestError

from app.ai_integration import generate_short_ai_weather_report
from app.keyboards import main_menu_kb
from app.storage import get_user_data, user_exists
from app.utils.checker import is_family_member
from app.utils.greeting import get_greeting
from app.utils.weather import fetch_forecast_data, get_weather

router = Router()


@router.message(F.text == "–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≥–æ–¥—É –∑–∞—Ä–∞–∑ üå§")
async def show_weather_now(message: types.Message):
    user_id = message.from_user.id

    if not is_family_member(user_id):
        await message.answer("‚õîÔ∏è –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –¥–ª—è –Ω–∞—à–æ—ó —Ä–æ–¥–∏–Ω–∏ ‚ù§Ô∏è")
        return

    if not user_exists(user_id):
        await message.answer("‚ö†Ô∏è –¢–∏ —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–≤ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è. –ù–∞–ø–∏—à–∏ /start.")
        return

    user_data = get_user_data(user_id)
    lat = user_data.get("lat")
    lon = user_data.get("lon")

    if lat is None or lon is None:
        await message.answer(
            "‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ. –°–ø—Ä–æ–±—É–π –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è."
        )
        return

    try:
        lat = float(lat)
        lon = float(lon)
    except (TypeError, ValueError):
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –°–ø—Ä–æ–±—É–π –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
        return

    forecast_points = await fetch_forecast_data(lat, lon)
    current_weather = await get_weather(lat, lon)

    if not forecast_points:
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    try:
        text = await generate_short_ai_weather_report(
            user_id, forecast_points, current_weather
        )
    except (HTTPStatusError, RequestError, Exception):
        text = generate_fallback_weather_text(user_id, forecast_points, current_weather)

    await message.answer(text, reply_markup=main_menu_kb())


def generate_fallback_weather_text(user_id, forecast_points, current_weather) -> str:
    greeting = get_greeting(user_id)

    forecast_summary = []
    for point in forecast_points[:4]:
        time = point["time"][11:16]
        desc = point["description"].capitalize()
        temp = point["temp"]
        feels = point["feels_like"]
        pop = int(point["pop"] * 100)
        wind = point["wind_speed"]

        precip_text = f"–û–ø–∞–¥–∏: {pop}%" if pop > 0 else "–û–ø–∞–¥—ñ–≤ –Ω–µ–º–∞—î"
        forecast_summary.append(
            f"{time}: {desc}, {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è —è–∫ {feels}¬∞C), –≤—ñ—Ç–µ—Ä {wind} –º/—Å, {precip_text}"
        )

    text = (
        f"{greeting}\n\n"
        f"–ó–∞—Ä–∞–∑ –∑–∞ –≤—ñ–∫–Ω–æ–º:\n{current_weather}\n\n"
        "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ –≥–æ–¥–∏–Ω–∏:\n" + "\n".join(forecast_summary) + "\n\n"
        "ü•≤ AI-—Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –û—Å—å –ø—Ä–æ–≥–Ω–æ–∑ –±–µ–∑ –∂–∞—Ä—Ç—ñ–≤ —ñ –≥—É–º–æ—Ä—É."
    )
    return text
